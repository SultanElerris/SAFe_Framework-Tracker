{"version":3,"sources":["../../../global/utility/ssAsync.js"],"names":[],"mappings":";;AAAA,AAAC,CAAA,YAAW;AAAC,aAAY,CAAC,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;;;;AAI9D,IAAG,CAAC,OAAO,CAAC,SAAS,EAAE,UAAU,EAAE,EAAE;;AAEpC,SAAO,OAAO,CAAC;;AAGf,WAAS,OAAO,CAAC,SAAS,EAAE;AAC3B,OAAI,OAAO,GAAG,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC1C,OAAI,SAAS,GAAG,2BAA2B,CAAC;AACtC,OAAI,SAAS,CAAC,WAAW,CAAC,IAAI,KAAK,mBAAmB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE;AAChG,UAAM,IAAI,SAAS,CAAC,oCAAoC,CAAC,CAAC;IAC7D;;;AAGJ,UAAO,YAAM;AACN,QAAI,gBAAgB,GAAG,EAAE,CAAC,KAAK,EAAE;QAC7B,GAAG,GAAG,SAAS,EAAE,CAAC;;AAEtB,WAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AACnB,WAAO,gBAAgB,CAAC,OAAO,CAAC;;AAEhC,aAAS,OAAO,CAAC,GAAG,EAAE,UAAU,EAAE;AAC9B,SAAI,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;;;AAGnC,SAAI,OAAO,CAAC,IAAI,EAAE;AACd,sBAAgB,CAAC,OAAO,EAAE,CAAC;AAC3B,aAAO;MACV;;AAED,SAAI,OAAO,CAAC,KAAK,YAAY,KAAK,EAAE;AAChC,aAAO,GAAG,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;MACnC,MAAM;AACH,aAAO,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;MACpC;;AAED,YAAO,CAAC,IAAI,CACR,UAAC,IAAI;aAAK,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC;MAAA,EAC5B,UAAC,GAAG;aAAK,GAAG,SAAM,CAAC,GAAG,CAAC;MAAA,CAC1B,CAAC;KACL;IACJ,CAAC;GACL;EAGJ,CAAC,CAAC;;;CAIH,CAAA,EAAE,CAAE","file":"ssAsync.js","sourcesContent":["(function() {'use strict';var app = angular.module('piStatus');\n\n\t// #--------------------------------# //\n\t// #----- Helper (ssAsync) -----# //\n\tapp.factory('ssAsync', function ($q) {\n\n\t\treturn ssAsync;\n\n\n\t\tfunction ssAsync(generator) {\n\t\t\tvar fnToStr = Function.prototype.toString;\n\t\t\tvar isFnRegex = /\\s*(?:regeneratorRuntime)/;\t\t// What is used in the polyfill for ES5 version of a generator function\n\t        if (generator.constructor.name !== 'GeneratorFunction' && !isFnRegex.test(fnToStr.call(generator))) {\n\t            throw new TypeError('ssAsync: Invalid GeneratorFunction');\n\t        }\n\n\t        // the output of ssAsync function\n\t\t    return () => {\n\t            var genCompleteDefer = $q.defer(),\n\t                gen = generator();\n\n\t            genNext(gen, null);\n\t            return genCompleteDefer.promise;\n\n\t            function genNext(gen, lastResult) {\n\t                var yielded = gen.next(lastResult);\n\n\t                // if we are done, resolve and stop\n\t                if (yielded.done) {\n\t                    genCompleteDefer.resolve();\n\t                    return;\n\t                }\n\t                // reassign yielded to the value\n\t                if (yielded.value instanceof Array) {\n\t                    yielded = $q.all(yielded.value);\n\t                } else {\n\t                    yielded = $q.when(yielded.value);\n\t                }\n\n\t                yielded.then(\n\t                    (data) => genNext(gen, data),\n\t                    (err) => gen.throw(err)\n\t                );\n\t            }\n\t        };\n    \t}\n\n\n\t});\n\t// #--- END Helper (ssAsyncHelp) ---# //\n\t// #--------------------------------# //\n\n}());\n"]}